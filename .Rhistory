temp_len = rep(0,1000)
temp_coverage = rep(0,1000)
for (mcs in 1:1000) {
sample_binom = rbinom(n = 30, size = 10, prob = p_s[i])
ci_cp = binom.confint(sample_binom, n = 10,alpha = 0.05, methods = "exact")
temp_len[mcs] <- mean(ci_cp$upper- ci_cp$lower)
temp_coverage[mcs] <-sum(mean(ci_cp$lower) < sample_binom/10&
sample_binom/10<mean(ci_cp$upper))/30
}
cp_res_len_30[i] <-  mean(temp_len)
cp_res_coverage_30[i] <-  mean(temp_coverage)
}
ac_res_coverage_30 = rep(0,99)
ac_res_len_30 = rep(0,99)
for (i in 1:99) {
temp_len = rep(0,1000)
temp_coverage = rep(0,1000)
for (mcs in 1:1000) {
sample_binom = rbinom(n = 30, size = 10, prob = p_s[i])
ci_ac = binom.confint(sample_binom, n = 10,alpha = 0.05, methods = "agresti-coull")
temp_len[mcs] <- mean(ci_ac$upper- ci_ac$lower)
temp_coverage[mcs] <-sum(mean(ci_ac$lower) < sample_binom/10&
sample_binom/10<mean(ci_ac$upper))/30
}
ac_res_len_30[i] <-  mean(temp_len)
ac_res_coverage_30[i] <-  mean(temp_coverage)
}
plot(p_s,wald_res_len_30, type = "l", frame = FALSE, pch = 19,
col = "red",main="Średnia długość przedziału ufności,
n = 30, długość próbki = 100, 1000 MCS",
xlab = "p",
ylab = "średnia długość przedziału",
lty = 1, lwd = 2)
lines(p_s, cp_res_len_30, pch = 23, col = "blue", type = "l",
lty = 2, lwd = 2)
lines(p_s, ac_res_len_30, pch = 18, col = "green", type = "b",
lty = 3, lwd = 2)
legend("topright", legend = c("Wald CI", "C-P CI", "A-C CI"),
col = c("red", "blue", "green"), lty = 1:3, cex = 0.8, xjust = 1)
plot(p_s,wald_res_len_30, type = "l", frame = FALSE, pch = 19,
col = "red",main="Średnia długość przedziału ufności,
n = 10, długość próbki = 30, 1000 MCS",
xlab = "p",
ylab = "średnia długość przedziału",
lty = 1, lwd = 2)
lines(p_s, cp_res_len_30, pch = 23, col = "blue", type = "l",
lty = 2, lwd = 2)
lines(p_s, ac_res_len_30, pch = 18, col = "green", type = "b",
lty = 3, lwd = 2)
legend("topright", legend = c("Wald CI", "C-P CI", "A-C CI"),
col = c("red", "blue", "green"), lty = 1:3, cex = 0.8, xjust = 1)
#| echo: false
wald_res_coverage_100 = rep(0,99)
wald_res_len_100 = rep(0,99)
for (i in 1:99) {
temp_len = rep(0,1000)
temp_coverage = rep(0,1000)
for (mcs in 1:1000) {
sample_binom = rbinom(n = 100, size = 10, prob = p_s[i])
ci_wald = Wald_CI(sample_binom, n = 10, 100, alpha = 0.05)
temp_len[mcs] <- ci_wald[2] - ci_wald[1]
temp_coverage[mcs] <-sum(ci_wald[1] < sample_binom/10& sample_binom/10<ci_wald[2])/100
}
wald_res_len_100[i] <-  mean(temp_len)
wald_res_coverage_100[i] <-  mean(temp_coverage)
}
cp_res_coverage_100 = rep(0,99)
cp_res_len_100 = rep(0,99)
for (i in 1:99) {
temp_len = rep(0,1000)
temp_coverage = rep(0,1000)
for (mcs in 1:1000) {
sample_binom = rbinom(n = 100, size = 10, prob = p_s[i])
ci_cp = binom.confint(sample_binom, n = 10,alpha = 0.05, methods = "exact")
temp_len[mcs] <- mean(ci_cp$upper- ci_cp$lower)
temp_coverage[mcs] <-sum(mean(ci_cp$lower) < sample_binom/10& sample_binom/10<mean(ci_cp$upper))/100
}
cp_res_len_100[i] <-  mean(temp_len)
cp_res_coverage_100[i] <-  mean(temp_coverage)
}
ac_res_coverage_100 = rep(0,99)
ac_res_len_100 = rep(0,99)
for (i in 1:99) {
temp_len = rep(0,1000)
temp_coverage = rep(0,1000)
for (mcs in 1:1000) {
sample_binom = rbinom(n = 100, size = 10, prob = p_s[i])
ci_ac = binom.confint(sample_binom, n = 10,alpha = 0.05, methods = "agresti-coull")
temp_len[mcs] <- mean(ci_ac$upper- ci_ac$lower)
temp_coverage[mcs] <-sum(mean(ci_ac$lower) < sample_binom/10& sample_binom/10<mean(ci_ac$upper))/100
}
ac_res_len_100[i] <-  mean(temp_len)
ac_res_coverage_100[i] <-  mean(temp_coverage)
}
#| echo: false
plot(p_s,wald_res_len_100, type = "l", frame = FALSE, pch = 19,
col = "red",main="Średnia długość przedziału ufności,
n = 100, długość próbki = 100, 1000 MCS", xlab = "p", ylab = "średnia długość przedziału",
lty = 1, lwd = 2)
lines(p_s, cp_res_len_100, pch = 23, col = "blue", type = "l",
lty = 2, lwd = 2)
lines(p_s, ac_res_len_100, pch = 18, col = "green", type = "b",
lty = 3, lwd = 2)
legend("topright", legend = c("Wald CI", "C-P CI", "A-C CI"),
col = c("red", "blue", "green"), lty = 1:3, cex = 0.8, xjust = 1)
#| echo: false
plot(p_s,wald_res_len_100, type = "l", frame = FALSE, pch = 19,
col = "red",main="Średnia długość przedziału ufności,
n = 10, długość próbki = 100, 1000 MCS", xlab = "p", ylab = "średnia długość przedziału",
lty = 1, lwd = 2)
lines(p_s, cp_res_len_100, pch = 23, col = "blue", type = "l",
lty = 2, lwd = 2)
lines(p_s, ac_res_len_100, pch = 18, col = "green", type = "b",
lty = 3, lwd = 2)
legend("topright", legend = c("Wald CI", "C-P CI", "A-C CI"),
col = c("red", "blue", "green"), lty = 1:3, cex = 0.8, xjust = 1)
#| echo: false
wald_res_coverage_30 = rep(0,99)
wald_res_len_30 = rep(0,99)
for (i in 1:99) {
temp_len = rep(0,1000)
temp_coverage = rep(0,1000)
for (mcs in 1:1000) {
sample_binom = rbinom(n = 100, size = 10, prob = p_s[i])
ci_wald = Wald_CI(sample_binom, n = 10, size = 100, 0.05)
temp_len[mcs] <- ci_wald[2] - ci_wald[1]
temp_coverage[mcs] <-sum(ci_wald[1] < sample_binom/10& sample_binom/10<ci_wald[2])/100
}
wald_res_len_100[i] <-  mean(temp_len)
wald_res_coverage_100[i] <-  mean(temp_coverage)
}
cp_res_coverage_100 = rep(0,99)
cp_res_len_100 = rep(0,99)
for (i in 1:99) {
temp_len = rep(0,1000)
temp_coverage = rep(0,1000)
for (mcs in 1:1000) {
sample_binom = rbinom(n = 100, size = 10, prob = p_s[i])
ci_cp = binom.confint(sample_binom, n = 10,alpha = 0.05, methods = "exact")
temp_len[mcs] <- mean(ci_cp$upper- ci_cp$lower)
temp_coverage[mcs] <-sum(mean(ci_cp$lower) < sample_binom/10&
sample_binom/10<mean(ci_cp$upper))/100
}
cp_res_len_100[i] <-  mean(temp_len)
cp_res_coverage_100[i] <-  mean(temp_coverage)
}
ac_res_coverage_100 = rep(0,99)
ac_res_len_100 = rep(0,99)
for (i in 1:99) {
temp_len = rep(0,1000)
temp_coverage = rep(0,1000)
for (mcs in 1:1000) {
sample_binom = rbinom(n = 100, size = 10, prob = p_s[i])
ci_ac = binom.confint(sample_binom, n = 10,alpha = 0.05, methods = "agresti-coull")
temp_len[mcs] <- mean(ci_ac$upper- ci_ac$lower)
temp_coverage[mcs] <-sum(mean(ci_ac$lower) < sample_binom/10&
sample_binom/10<mean(ci_ac$upper))/100
}
ac_res_len_100[i] <-  mean(temp_len)
ac_res_coverage_100[i] <-  mean(temp_coverage)
}
#| echo: false
plot(p_s,wald_res_len_100, type = "l", frame = FALSE, pch = 19,
col = "red",main="Średnia długość przedziału ufności,
n = 10, długość próbki = 100, 1000 MCS", xlab = "p", ylab = "średnia długość przedziału",
lty = 1, lwd = 2)
lines(p_s, cp_res_len_100, pch = 23, col = "blue", type = "l",
lty = 2, lwd = 2)
lines(p_s, ac_res_len_100, pch = 18, col = "green", type = "b",
lty = 3, lwd = 2)
legend("topright", legend = c("Wald CI", "C-P CI", "A-C CI"),
col = c("red", "blue", "green"), lty = 1:3, cex = 0.8, xjust = 1)
#| echo: false
plot(p_s,wald_res_coverage_100, type = "l", frame = FALSE, pch = 19,
col = "red",main="Prawdopodobieństwo pokrycia przedziału ufności,
n = 100, długość próbki = 100, 1000 MCS", xlab = "p", ylab = "prawdopodobieństwo pokrycia",
lty = 1, lwd = 2,ylim = c(0.8,1))
lines(p_s, cp_res_coverage_100, pch = 23, col = "blue", type = "l",
lty = 2, lwd = 2)
lines(p_s, ac_res_coverage_100, pch = 18, col = "green", type = "b",
lty = 3, lwd = 2)
legend("topright", legend = c("Wald CI", "C-P CI", "A-C CI"),
col = c("red", "blue", "green"), lty = 1:3, cex = 0.8, xjust = 1)
plot(p_s,wald_res_coverage_30, type = "l", frame = FALSE, pch = 19,
col = "red",
main="Prawdopodobieństwo pokrycia przedziału ufności,
n = 30, długość próbki = 100, 1000 MCS", xlab = "p",
ylab = "prawdopodobieństwo pokrycia",
lty = 1, lwd = 2,ylim = c(0.8,1))
lines(p_s, cp_res_coverage_30, pch = 23, col = "blue", type = "l",
lty = 2, lwd = 2)
lines(p_s, ac_res_coverage_30, pch = 18, col = "green", type = "b",
lty = 3, lwd = 2)
legend("topright", legend = c("Wald CI", "C-P CI", "A-C CI"),
col = c("red", "blue", "green"), lty = 1:3, cex = 0.8, xjust = 1)
plot(p_s,wald_res_coverage_30, type = "l", frame = FALSE, pch = 19,
col = "red",
main="Prawdopodobieństwo pokrycia przedziału ufności,
n = 30, długość próbki = 100, 1000 MCS", xlab = "p",
ylab = "prawdopodobieństwo pokrycia",
lty = 1, lwd = 2,ylim = c(0.7,1))
lines(p_s, cp_res_coverage_30, pch = 23, col = "blue", type = "l",
lty = 2, lwd = 2)
lines(p_s, ac_res_coverage_30, pch = 18, col = "green", type = "b",
lty = 3, lwd = 2)
legend("topright", legend = c("Wald CI", "C-P CI", "A-C CI"),
col = c("red", "blue", "green"), lty = 1:3, cex = 0.8, xjust = 1)
plot(p_s,wald_res_coverage_30, type = "l", frame = FALSE, pch = 19,
col = "red",
main="Prawdopodobieństwo pokrycia przedziału ufności,
n = 30, długość próbki = 100, 1000 MCS", xlab = "p",
ylab = "prawdopodobieństwo pokrycia",
lty = 1, lwd = 2,ylim = c(0.60,1))
lines(p_s, cp_res_coverage_30, pch = 23, col = "blue", type = "l",
lty = 2, lwd = 2)
lines(p_s, ac_res_coverage_30, pch = 18, col = "green", type = "b",
lty = 3, lwd = 2)
legend("topright", legend = c("Wald CI", "C-P CI", "A-C CI"),
col = c("red", "blue", "green"), lty = 1:3, cex = 0.8, xjust = 1)
plot(p_s,wald_res_coverage_30, type = "l", frame = FALSE, pch = 19,
col = "red",
main="Prawdopodobieństwo pokrycia przedziału ufności,
n = 30, długość próbki = 100, 1000 MCS", xlab = "p",
ylab = "prawdopodobieństwo pokrycia",
lty = 1, lwd = 2,ylim = c(0,1))
lines(p_s, cp_res_coverage_30, pch = 23, col = "blue", type = "l",
lty = 2, lwd = 2)
lines(p_s, ac_res_coverage_30, pch = 18, col = "green", type = "b",
lty = 3, lwd = 2)
legend("topright", legend = c("Wald CI", "C-P CI", "A-C CI"),
col = c("red", "blue", "green"), lty = 1:3, cex = 0.8, xjust = 1)
plot(p_s,wald_res_coverage_30, type = "l", frame = FALSE, pch = 19,
col = "red",
main="Prawdopodobieństwo pokrycia przedziału ufności,
n = 30, długość próbki = 100, 1000 MCS", xlab = "p",
ylab = "prawdopodobieństwo pokrycia",
lty = 1, lwd = 2,ylim = c(0.8,1))
lines(p_s, cp_res_coverage_30, pch = 23, col = "blue", type = "l",
lty = 2, lwd = 2)
lines(p_s, ac_res_coverage_30, pch = 18, col = "green", type = "b",
lty = 3, lwd = 2)
legend("topright", legend = c("Wald CI", "C-P CI", "A-C CI"),
col = c("red", "blue", "green"), lty = 1:3, cex = 0.8, xjust = 1)
rm(list = ls())
#| warning: false
Wald_CI = function(X, n, size, alpha) {
p_est <- sum(X)/(n*size)
quantile <- qnorm(1-alpha/2, mean = 0, sd = 1)
lower_bound <-p_est - quantile * sqrt(p_est * (1-p_est) / n)
upper_bound <-p_est + quantile * sqrt(p_est * (1-p_est) / n)
CI <- c(lower_bound, upper_bound)
return(CI)
}
p_s = seq(from=0.01, to= 0.99, length.out = 99)
wald_res_coverage_30 = rep(0,99)
wald_res_len_30 = rep(0,99)
for (i in 1:99) {
temp_len = rep(0,1000)
temp_coverage = rep(0,1000)
for (mcs in 1:1000) {
sample_binom = rbinom(n = 30, size = 10, prob = p_s[i])
ci_wald = Wald_CI(sample_binom, n = 10, size = 30, 0.05)
temp_len[mcs] <- ci_wald[2] - ci_wald[1]
temp_coverage[mcs] <-sum(ci_wald[1] < sample_binom/10& sample_binom/10<ci_wald[2])/30
}
wald_res_len_30[i] <-  mean(temp_len)
wald_res_coverage_30[i] <-  mean(temp_coverage)
}
cp_res_coverage_30 = rep(0,99)
cp_res_len_30 = rep(0,99)
for (i in 1:99) {
temp_len = rep(0,1000)
temp_coverage = rep(0,1000)
for (mcs in 1:1000) {
sample_binom = rbinom(n = 30, size = 10, prob = p_s[i])
ci_cp = binom.confint(sample_binom, n = 10,alpha = 0.05, methods = "exact")
temp_len[mcs] <- mean(ci_cp$upper- ci_cp$lower)
temp_coverage[mcs] <-sum(mean(ci_cp$lower) < sample_binom/10&
sample_binom/10<mean(ci_cp$upper))/30
}
cp_res_len_30[i] <-  mean(temp_len)
cp_res_coverage_30[i] <-  mean(temp_coverage)
}
ac_res_coverage_30 = rep(0,99)
ac_res_len_30 = rep(0,99)
for (i in 1:99) {
temp_len = rep(0,1000)
temp_coverage = rep(0,1000)
for (mcs in 1:1000) {
sample_binom = rbinom(n = 30, size = 10, prob = p_s[i])
ci_ac = binom.confint(sample_binom, n = 10,alpha = 0.05, methods = "agresti-coull")
temp_len[mcs] <- mean(ci_ac$upper- ci_ac$lower)
temp_coverage[mcs] <-sum(mean(ci_ac$lower) < sample_binom/10&
sample_binom/10<mean(ci_ac$upper))/30
}
ac_res_len_30[i] <-  mean(temp_len)
ac_res_coverage_30[i] <-  mean(temp_coverage)
}
plot(p_s,wald_res_len_30, type = "l", frame = FALSE, pch = 19,
col = "red",main="Średnia długość przedziału ufności,
n = 10, długość próbki = 30, 1000 MCS",
xlab = "p",
ylab = "średnia długość przedziału",
lty = 1, lwd = 2)
lines(p_s, cp_res_len_30, pch = 23, col = "blue", type = "l",
lty = 2, lwd = 2)
lines(p_s, ac_res_len_30, pch = 18, col = "green", type = "b",
lty = 3, lwd = 2)
legend("topright", legend = c("Wald CI", "C-P CI", "A-C CI"),
col = c("red", "blue", "green"), lty = 1:3, cex = 0.8, xjust = 1)
plot(p_s,wald_res_coverage_30, type = "l", frame = FALSE, pch = 19,
col = "red",
main="Prawdopodobieństwo pokrycia przedziału ufności,
n = 30, długość próbki = 100, 1000 MCS", xlab = "p",
ylab = "prawdopodobieństwo pokrycia",
lty = 1, lwd = 2,ylim = c(0.8,1))
lines(p_s, cp_res_coverage_30, pch = 23, col = "blue", type = "l",
lty = 2, lwd = 2)
lines(p_s, ac_res_coverage_30, pch = 18, col = "green", type = "b",
lty = 3, lwd = 2)
legend("topright", legend = c("Wald CI", "C-P CI", "A-C CI"),
col = c("red", "blue", "green"), lty = 1:3, cex = 0.8, xjust = 1)
#| echo: false
wald_res_coverage_100 = rep(0,99)
wald_res_len_100 = rep(0,99)
for (i in 1:99) {
temp_len = rep(0,1000)
temp_coverage = rep(0,1000)
for (mcs in 1:1000) {
sample_binom = rbinom(n = 100, size = 10, prob = p_s[i])
ci_wald = Wald_CI(sample_binom, n = 10, size = 100, 0.05)
temp_len[mcs] <- ci_wald[2] - ci_wald[1]
temp_coverage[mcs] <-sum(ci_wald[1] < sample_binom/10& sample_binom/10<ci_wald[2])/100
}
wald_res_len_100[i] <-  mean(temp_len)
wald_res_coverage_100[i] <-  mean(temp_coverage)
}
cp_res_coverage_100 = rep(0,99)
cp_res_len_100 = rep(0,99)
for (i in 1:99) {
temp_len = rep(0,1000)
temp_coverage = rep(0,1000)
for (mcs in 1:1000) {
sample_binom = rbinom(n = 100, size = 10, prob = p_s[i])
ci_cp = binom.confint(sample_binom, n = 10,alpha = 0.05, methods = "exact")
temp_len[mcs] <- mean(ci_cp$upper- ci_cp$lower)
temp_coverage[mcs] <-sum(mean(ci_cp$lower) < sample_binom/10&
sample_binom/10<mean(ci_cp$upper))/100
}
cp_res_len_100[i] <-  mean(temp_len)
cp_res_coverage_100[i] <-  mean(temp_coverage)
}
ac_res_coverage_100 = rep(0,99)
ac_res_len_100 = rep(0,99)
for (i in 1:99) {
temp_len = rep(0,1000)
temp_coverage = rep(0,1000)
for (mcs in 1:1000) {
sample_binom = rbinom(n = 100, size = 10, prob = p_s[i])
ci_ac = binom.confint(sample_binom, n = 10,alpha = 0.05, methods = "agresti-coull")
temp_len[mcs] <- mean(ci_ac$upper- ci_ac$lower)
temp_coverage[mcs] <-sum(mean(ci_ac$lower) < sample_binom/10&
sample_binom/10<mean(ci_ac$upper))/100
}
ac_res_len_100[i] <-  mean(temp_len)
ac_res_coverage_100[i] <-  mean(temp_coverage)
}
#| echo: false
plot(p_s,wald_res_len_100, type = "l", frame = FALSE, pch = 19,
col = "red",main="Średnia długość przedziału ufności,
n = 10, długość próbki = 100, 1000 MCS", xlab = "p", ylab = "średnia długość przedziału",
lty = 1, lwd = 2)
lines(p_s, cp_res_len_100, pch = 23, col = "blue", type = "l",
lty = 2, lwd = 2)
lines(p_s, ac_res_len_100, pch = 18, col = "green", type = "b",
lty = 3, lwd = 2)
legend("topright", legend = c("Wald CI", "C-P CI", "A-C CI"),
col = c("red", "blue", "green"), lty = 1:3, cex = 0.8, xjust = 1)
#| echo: false
plot(p_s,wald_res_coverage_100, type = "l", frame = FALSE, pch = 19,
col = "red",main="Prawdopodobieństwo pokrycia przedziału ufności,
n = 100, długość próbki = 100, 1000 MCS", xlab = "p", ylab = "prawdopodobieństwo pokrycia",
lty = 1, lwd = 2,ylim = c(0.8,1))
lines(p_s, cp_res_coverage_100, pch = 23, col = "blue", type = "l",
lty = 2, lwd = 2)
lines(p_s, ac_res_coverage_100, pch = 18, col = "green", type = "b",
lty = 3, lwd = 2)
legend("topright", legend = c("Wald CI", "C-P CI", "A-C CI"),
col = c("red", "blue", "green"), lty = 1:3, cex = 0.8, xjust = 1)
#| echo: false
wald_res_coverage_1000 = rep(0,99)
wald_res_len_1000 = rep(0,99)
for (i in 1:99) {
temp_len = rep(0,1000)
temp_coverage = rep(0,1000)
for (mcs in 1:1000) {
sample_binom = rbinom(n = 1000, size = 10, prob = p_s[i])
ci_wald = Wald_CI(sample_binom, n = 10, size = 1000, 0.05)
temp_len[mcs] <- ci_wald[2] - ci_wald[1]
temp_coverage[mcs] <-sum(ci_wald[1] < sample_binom/10& sample_binom/10<ci_wald[2])/1000
}
wald_res_len_1000[i] <-  mean(temp_len)
wald_res_coverage_1000[i] <-  mean(temp_coverage)
}
cp_res_coverage_1000 = rep(0,99)
cp_res_len_1000 = rep(0,99)
for (i in 1:99) {
temp_len = rep(0,1000)
temp_coverage = rep(0,1000)
for (mcs in 1:1000) {
sample_binom = rbinom(n = 1000, size = 10, prob = p_s[i])
ci_cp = binom.confint(sample_binom, n = 10,alpha = 0.05, methods = "exact")
temp_len[mcs] <- mean(ci_cp$upper- ci_cp$lower)
temp_coverage[mcs] <-sum(mean(ci_cp$lower) < sample_binom/10&
sample_binom/10<mean(ci_cp$upper))/1000
}
cp_res_len_1000[i] <-  mean(temp_len)
cp_res_coverage_1000[i] <-  mean(temp_coverage)
}
#| echo: false
wald_res_coverage_1000 = rep(0,99)
wald_res_len_1000 = rep(0,99)
for (i in 1:99) {
temp_len = rep(0,1000)
temp_coverage = rep(0,1000)
for (mcs in 1:1000) {
sample_binom = rbinom(n = 1000, size = 10, prob = p_s[i])
ci_wald = Wald_CI(sample_binom, n = 10, size = 1000, 0.05)
temp_len[mcs] <- ci_wald[2] - ci_wald[1]
temp_coverage[mcs] <-sum(ci_wald[1] < sample_binom/10& sample_binom/10<ci_wald[2])/1000
}
wald_res_len_1000[i] <-  mean(temp_len)
wald_res_coverage_1000[i] <-  mean(temp_coverage)
}
cp_res_coverage_1000 = rep(0,99)
cp_res_len_1000 = rep(0,99)
for (i in 1:99) {
temp_len = rep(0,1000)
temp_coverage = rep(0,1000)
for (mcs in 1:1000) {
sample_binom = rbinom(n = 1000, size = 10, prob = p_s[i])
ci_cp = binom.confint(sample_binom, n = 10,alpha = 0.05, methods = "exact")
temp_len[mcs] <- mean(ci_cp$upper- ci_cp$lower)
temp_coverage[mcs] <-sum(mean(ci_cp$lower) < sample_binom/10&
sample_binom/10<mean(ci_cp$upper))/1000
}
cp_res_len_1000[i] <-  mean(temp_len)
cp_res_coverage_1000[i] <-  mean(temp_coverage)
}
ac_res_coverage_1000 = rep(0,99)
ac_res_len_1000 = rep(0,99)
for (i in 1:99) {
temp_len = rep(0,1000)
temp_coverage = rep(0,1000)
for (mcs in 1:1000) {
sample_binom = rbinom(n = 1000, size = 10, prob = p_s[i])
ci_ac = binom.confint(sample_binom, n = 10,alpha = 0.05, methods = "agresti-coull")
temp_len[mcs] <- mean(ci_ac$upper- ci_ac$lower)
temp_coverage[mcs] <-sum(mean(ci_ac$lower) < sample_binom/10&
sample_binom/10<mean(ci_ac$upper))/1000
}
ac_res_len_1000[i] <-  mean(temp_len)
ac_res_coverage_1000[i] <-  mean(temp_coverage)
}
#| warning: false
#| echo: false
plot(p_s,wald_res_len_1000, type = "l", frame = FALSE, pch = 19,
col = "red",main="Średnia długość przedziału ufności,
n = 1000, długość próbki = 100, 1000 MCS", xlab = "p",
ylab = "średnia długość przedziału",
lty = 1, lwd = 2)
lines(p_s, cp_res_len_1000, pch = 23, col = "blue", type = "l",
lty = 2, lwd = 2)
lines(p_s, ac_res_len_1000, pch = 18, col = "green", type = "b",
lty = 3, lwd = 2)
legend("topright", legend = c("Wald CI", "C-P CI", "A-C CI"),
col = c("red", "blue", "green"), lty = 1:3, cex = 0.8, xjust = 1)
#| warning: false
#| echo: false
plot(p_s,wald_res_coverage_1000, type = "l", frame = FALSE, pch = 19,
col = "red",main="Prawdopodobieństwo pokrycia przedziału ufności,
n = 1000, długość próbki = 100, 1000 MCS", xlab = "p",
ylab = "prawdopodobieństwo pokrycia",
lty = 1, lwd = 2,ylim = c(0.8,1))
lines(p_s, cp_res_coverage_1000, pch = 23, col = "blue", type = "l",
lty = 2, lwd = 2)
lines(p_s, ac_res_coverage_1000, pch = 18, col = "green", type = "b",
lty = 3, lwd = 2)
legend("topright", legend = c("Wald CI", "C-P CI", "A-C CI"),
col = c("red", "blue", "green"), lty = 1:3, cex = 0.8, xjust = 1)
rm(list = ls())
## Lista 2. Część 2.###
### operacje na danych jak wcześniej
data <- read.csv("ankieta.csv", sep = ';', col.names = c('DZIAL', 'STAZ', 'CZY_KIER', 'PYT_1', 'PYT_2', 'PYT_3', 'PLEC', 'WIEK'))
cwd("maciejostapiuk/projects/ada")
setwd("maciejostapiuk/projects/ada")
setwd("~/maciejostapiuk/projects/ada")
setwd("~/maciejostapiuk/projects/ada")
setwd("~/")
## Lista 2. Część 2.###
### operacje na danych jak wcześniej
data <- read.csv("ankieta.csv", sep = ';', col.names = c('DZIAL', 'STAZ', 'CZY_KIER', 'PYT_1', 'PYT_2', 'PYT_3', 'PLEC', 'WIEK'))
setwd("~/Users/maciejostapiuk")
setwd("~/maciejostapiuk/")
setwd("/Users/maciejostapiuk/projects/ada")
## Lista 2. Część 2.###
### operacje na danych jak wcześniej
data <- read.csv("ankieta.csv", sep = ';', col.names = c('DZIAL', 'STAZ', 'CZY_KIER', 'PYT_1', 'PYT_2', 'PYT_3', 'PLEC', 'WIEK'))
setwd("/Users/maciejostapiuk/projects/ada")
## Lista 2. Część 2.###
### operacje na danych jak wcześniej
data <- read.csv("ankieta.csv", sep = ';', col.names = c('DZIAL', 'STAZ', 'CZY_KIER', 'PYT_1', 'PYT_2', 'PYT_3', 'PLEC', 'WIEK'))
