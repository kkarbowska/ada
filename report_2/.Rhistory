# Wynik testu w postaci p-wartości wynoszącej 0.004397 wykazał, że przy założonym poziomie istotności 0.01
# istnieją wystarczające podstawy do odrzucenia hipotezy zerowej. Porównując test chi-kwadrat z testem Fishera,
# oba wykazują odrzucenie hipotezy zerowej na poziomie istotności 0.05.
# Jednakże tylko test chi-kwadrat utrzymuje to odrzucenie na poziomie istotności 0.01.
assocplot(ftable_PYT2_CZY_KIER, col = c("lightblue", "pink"), main = 'Zależność pomiędzy zmiennymi',xlab = "Poziom zadowolenia w 1. badanym okresie", ylab = "Stanowisko kierownicze")
# Na wykresie asocjacji zauważamy, że prostokąty nie są równomiernie rozłożone.
# Ich różne wielkości sugerują, że istnieje związek między zmiennymi.
# Wartości prostokątów są znacząco różne, co wskazuje na nielosowy charakter występowania danych kategorii zmiennych.
# Jednakże, na podstawie samej różnorodności wielkości prostokątów nie możemy jednoznacznie stwierdzić, czy zmienne są niezależne.
# Konieczne jest przeprowadzenie dodatkowych analiz, takich jak test statystyczny,
# co wykonaliśmy wcześniej i potwierdziło to że zmienne są najprawdopodobniej zależne.
## Zadanie 10 Napisz funkcj˛e, która dla danych z tablicy dwudzielczej oblicza wartos´c poziomu ´
## krytycznego w tescie niezale ´ znosci opartym na ilorazie wiarogodnosci. Korzystaj ˛ac z napisanej ˙
## funkcji, wykonaj test dla danych z zadania 8.
test_IW <- function(table){
# liczba obserwacji
n <- sum(table)
C <- ncol(table)
R <- nrow(table)
# rozkłady brzegowe
R_totals <- rowSums(table)
C_totals <- colSums(table)
outer_table <- outer(R_totals, C_totals)
expected <- (outer_table/(table*n))^table
lambda <- prod(expected)
G2 <- -2*log(lambda)
df <- (R-1)*(C-1)
p_value <- 1-pchisq(G2, df)
return (p_value)
}
cat('P-wartość: ',test_IW(ftable_PYT2_CZY_KIER))
# Dla danych z zadania 6 p-wartość wynosi 0.03969. Jeśli weźmiemy poziom istotności 0.01 to nie podstaw
# do odrzucenia, natomiast dla poziomu istotności 0.05 należy odrzucić hipotezę zerową.
# Zadanie 9. Zapoznaj si˛e z funkcj ˛a rmultinom z pakietu stats, a nast˛epnie korzystaj ˛ac z niej
# przeprowad´z symulacje w celu oszacowania mocy testu Fishera oraz mocy testu chi-kwadrat
# Pearsona, generuj ˛ac dane z tabeli 2 × 2, w której p11 = 1/40, p12 = 3/40, p21 = 19/40,
# p22 = 17/40. Symulacje wykonaj dla n = 50, n = 100 oraz n = 1000.
set.seed(12345)
simulate_power <- function(MC=500, alpha, n, p){
power_fisher <- rep(0, MC)
power_chisq <- rep(0, MC)
power_chisq_uncorrect <- rep(0, MC)
for (i in 1:MC) {
multi <- rmultinom(n=1, size=n, prob=p)
fisher_test <- fisher.test(matrix(multi, nrow=2))
power_fisher[i] <- as.numeric(fisher_test$p.value < alpha)
chisq_test <- chisq.test(matrix(multi+0.00000001, nrow=2), correct = TRUE)
power_chisq[i] <- as.numeric(chisq_test$p.value < alpha)
chisq_test_uncorrect <- chisq.test(matrix(multi+0.00000001, nrow=2), simulate.p.value = TRUE)
power_chisq_uncorrect[i] <- as.numeric(chisq_test_uncorrect$p.value < alpha)
p_value_chisq <- chisq.test(matrix(multi+0.00000001, nrow=2), correct = TRUE)$p.value
p_value_chisq_uncorrect <- chisq.test(matrix(multi+0.00000001, nrow=2), simulate.p.value = TRUE)$p.value
}
return(c(mean(power_fisher), mean(power_chisq), mean(power_chisq_uncorrect)))
}
p <- c(1/40, 3/40, 19/40, 17/40)
# dla alpha 0.05
power_50 <- simulate_power(MC=500, alpha=0.05, n=50, p)
power_100 <- simulate_power(MC=500, alpha=0.05, n=100, p)
power_1000 <- simulate_power(MC=500, alpha=0.05, n=1000, p)
df_05 <- data.frame('Typ testu' = c('test Fishera', 'test Chi2 z poprawką', 'test Chi2 bez poprawki'), 'n=50' = power_50, 'n=100' = power_100, 'n=1000'= power_1000)
view(df_05)
power_50_01 <- simulate_power(MC=500, alpha=0.01, n=50, p)
power_100_01 <- simulate_power(MC=500, alpha=0.01, n=100, p)
power_1000_01 <- simulate_power(MC=500, alpha=0.01, n=1000, p)
df_01 <- data.frame('Typ testu' = c('test Fishera', 'test Chi2 z poprawką', 'test Chi2 bez poprawki'), 'n=50' = power_50_01, 'n=100' = power_100_01, 'n=1000'= power_1000_01)
view(df_01)
responses <-c("very dissatisfied"=14, "dissatisfied"=17, "neither sattisfied nor dissatisfied"=40, "satisfied" = 100, "highly satisfied" = 29)
responses/200
responses <-c("very dissatisfied"=14, "dissatisfied"=17, "neither sattisfied nor dissatisfied"=40, "satisfied" = 100, "highly satisfied" = 29)
responses
responses <-c("very dissatisfied"=14, "dissatisfied"=17, "neither sattisfied nor dissatisfied"=40, "satisfied" = 100, "highly satisfied" = 29)
responses_probs <- responses/200
responses <-c("very dissatisfied"=14, "dissatisfied"=17, "neither sattisfied nor dissatisfied"=40, "satisfied" = 100, "highly satisfied" = 29)
responses_probs <- responses/200
responses_probs
install.packages("MultinomialCI")
library(MultinomialCI)
res <- multinomialCI(responses_probs)
res <- multinomialCI(responses_probs, 0.05)
res
print(paste("very dissatisfied: [", m[1,1], m[1,2], "]"))
print(paste("very dissatisfied: [", res[1,1], res[1,2], "]"))
print(paste("dissatisfied: [", res[2,1], res[2,2], "]"))
print(paste("neither sattisfied nor dissatisfied: [", res[3,1], res[3,2], "]"))
res <- multinomialCI(responses_probs, alpha = 0.05)
print(paste("very dissatisfied: [", res[1,1], res[1,2], "]"))
print(paste("dissatisfied: [", res[2,1], res[2,2], "]"))
print(paste("neither sattisfied nor dissatisfied: [", res[3,1], res[3,2], "]"))
res <- multinomialCI(responses, alpha = 0.05)
print(paste("very dissatisfied: [", res[1,1], res[1,2], "]"))
print(paste("dissatisfied: [", res[2,1], res[2,2], "]"))
print(paste("neither sattisfied nor dissatisfied: [", res[3,1], res[3,2], "]"))
print(paste("very dissatisfied: [", res[1,1], res[1,2], "]"))
print(paste("dissatisfied: [", res[2,1], res[2,2], "]"))
print(paste("neither sattisfied nor dissatisfied: [", res[3,1], res[3,2], "]"))
print(paste("satisfied: [", res[4,1], res[4,2], "]"))
print(paste("very satisfied: [", res[5,1], res[5,2], "]"))
get_p_value <-function(x,n,h0){
#' Calculates p_values of user's choice test: either chi-square or maximum-likelihood chi-square
point_probs_estimator = x/n
chi_square_test_statistic <- sum((x - n*h_0)^2/(n*h_0))
chi_square_maximum_likelihood_test_statistic <- sum((x - n*point_probs_estimator)^2/(n*point_probs_estimator))
k <-  length(x)
p_value_chi_sq <- 1-pchisq(chi_square_test_statistic, df = k-1)
p_value_chi_sq_max_likelihood <- 1-pchisq(chi_square_maximum_likelihood_test_statistic, df = k-2)
return(c("p_value of chi-square test" = p_value_chi_sq, "p_value of maximum-likelihood chi-square test" = p_value_chi_sq_max_likelihood )
}
get_p_value <-function(x,n,h0){
#' Calculates p_values of user's choice test: either chi-square or maximum-likelihood chi-square
point_probs_estimator = x/n
chi_square_test_statistic <- sum((x - n*h_0)^2/(n*h_0))
chi_square_maximum_likelihood_test_statistic <- sum((x - n*point_probs_estimator)^2/(n*point_probs_estimator))
k <-  length(x)
p_value_chi_sq <- 1-pchisq(chi_square_test_statistic, df = k-1)
p_value_chi_sq_max_likelihood <- 1-pchisq(chi_square_maximum_likelihood_test_statistic, df = k-2)
return(c("p_value of chi-square test" = p_value_chi_sq, "p_value of maximum-likelihood chi-square test" = p_value_chi_sq_max_likelihood ))
}
sample <-  rmultinom(1, 5, c(0.1, 0.2, 0.4, 0.2, 0.1))
sample <-  rmultinom(5, 5, c(0.1, 0.2, 0.4, 0.2, 0.1))
sample <-  rmultinom(1, 100, c(0.1, 0.2, 0.4, 0.2, 0.1))
get_p_value(sample_multinom, 100, c(0.1, 0.2, 0.4, 0.2, 0.1))
sample_multinom <-  rmultinom(1, 100, c(0.1, 0.2, 0.4, 0.2, 0.1))
get_p_value(sample_multinom, 100, c(0.1, 0.2, 0.4, 0.2, 0.1))
get_p_value(sample_multinom, 100, h0 = c(0.1, 0.2, 0.4, 0.2, 0.1))
get_p_value(sample_multinom, 100, h_0 = c(0.1, 0.2, 0.4, 0.2, 0.1))
get_p_value(sample_multinom, 100, c(0.1, 0.2, 0.4, 0.2, 0.1))
get_p_value(x = sample_multinom, n = 100, h_0 = c(0.1, 0.2, 0.4, 0.2, 0.1))
get_p_value <-function(x,n,h_0){
#' Calculates p_values of user's choice test: either chi-square or maximum-likelihood chi-square
point_probs_estimator = x/n
chi_square_test_statistic <- sum((x - n*h_0)^2/(n*h_0))
chi_square_maximum_likelihood_test_statistic <- sum((x - n*point_probs_estimator)^2/(n*point_probs_estimator))
k <-  length(x)
p_value_chi_sq <- 1-pchisq(chi_square_test_statistic, df = k-1)
p_value_chi_sq_max_likelihood <- 1-pchisq(chi_square_maximum_likelihood_test_statistic, df = k-2)
return(c("p_value of chi-square test" = p_value_chi_sq, "p_value of maximum-likelihood chi-square test" = p_value_chi_sq_max_likelihood ))
}
sample_multinom <-  rmultinom(1, 100, c(0.1, 0.2, 0.4, 0.2, 0.1))
get_p_value(x = sample_multinom, n = 100, h_0 = c(0.1, 0.2, 0.4, 0.2, 0.1))
get_p_value <-function(x,n,h_0){
#' Calculates p_values of user's choice test: either chi-square or maximum-likelihood chi-square
point_probs_estimator = x/n
chi_square_test_statistic <- sum((x - n*h_0)^2/(n*h_0))
chi_square_maximum_likelihood_test_statistic <- sum((x - n*point_probs_estimator)^2/(n*point_probs_estimator))
k <-  length(x)
p_value_chi_sq <- 1-pchisq(chi_square_test_statistic, df = k-1)
p_value_chi_sq_max_likelihood <- 1-pchisq(chi_square_maximum_likelihood_test_statistic, df = k-1)
return(c("p_value of chi-square test" = p_value_chi_sq, "p_value of maximum-likelihood chi-square test" = p_value_chi_sq_max_likelihood ))
}
sample_multinom <-  rmultinom(1, 100, c(0.1, 0.2, 0.4, 0.2, 0.1))
get_p_value(x = sample_multinom, n = 100, h_0 = c(0.1, 0.2, 0.4, 0.2, 0.1))
get_p_value <-function(x,n,h_0){
#' Calculates p_values of user's choice test: either chi-square or maximum-likelihood chi-square
point_probs_estimator = x/n
chi_square_test_statistic <- sum((x - n*h_0)^2/(n*h_0))
chi_square_maximum_likelihood_test_statistic <- sum((x - n*point_probs_estimator)^2/(n*point_probs_estimator))
k <-  length(x)
p_value_chi_sq <- 1-pchisq(chi_square_test_statistic, df = k-1)
p_value_chi_sq_max_likelihood <- 1-pchisq(chi_square_maximum_likelihood_test_statistic, df = k-1)
return(c("p_value of chi-square test" = p_value_chi_sq, "p_value of maximum-likelihood chi-square test" = p_value_chi_sq_max_likelihood ))
}
sample_multinom <-  rmultinom(1, 100, c(0.1, 0.2, 0.4, 0.2, 0.1))
get_p_value(x = sample_multinom, n = 100, h_0 = c(0.1, 0.2, 0.4, 0.2, 0.1))
get_p_value <-function(x,n,h_0){
#' Calculates p_values of user's choice test: either chi-square or maximum-likelihood chi-square
point_probs_estimator = x/n
chi_square_test_statistic <- sum((x - n*h_0)^2/(n*h_0))
chi_square_maximum_likelihood_test_statistic <- sum((x - n*point_probs_estimator)^2/(n*point_probs_estimator))
k <-  length(x)
p_value_chi_sq <- 1-pchisq(chi_square_test_statistic, df = k-1)
p_value_chi_sq_max_likelihood <- 1-pchisq(chi_square_maximum_likelihood_test_statistic, df = k-1)
return(c("p_value of chi-square test" = p_value_chi_sq, "p_value of maximum-likelihood chi-square test" = p_value_chi_sq_max_likelihood ))
}
sample_multinom <-  rmultinom(1, 100, c(0.1, 0.2, 0.4, 0.2, 0.1))
get_p_value(x = sample_multinom, n = 100, h_0 = c(0.1, 0.2, 0.4, 0.2, 0.1))
get_p_value <-function(x,n,h_0){
#' Calculates p_values of user's choice test: either chi-square or maximum-likelihood chi-square
point_probs_estimator = x/n
chi_square_test_statistic <- sum((x - n*h_0)^2/(n*h_0))
chi_square_maximum_likelihood_test_statistic <- sum((x - n*point_probs_estimator)^2/(n*point_probs_estimator))
k <-  length(x)
p_value_chi_sq <- 1-pchisq(chi_square_test_statistic, df = k-1)
p_value_chi_sq_max_likelihood <- 1-pchisq(chi_square_maximum_likelihood_test_statistic, df = k-1)
return(c("p_value of chi-square test" = p_value_chi_sq, "p_value of maximum-likelihood chi-square test" = p_value_chi_sq_max_likelihood ))
}
sample_multinom <-  rmultinom(1, 100, c(0.1, 0.2, 0.4, 0.2, 0.1))
get_p_value(x = sample_multinom, n = 100, h_0 = c(0.1, 0.2, 0.4, 0.2, 0.1))
get_p_value <-function(x,n,h_0){
#' Calculates p_values of user's choice test: either chi-square or maximum-likelihood chi-square
point_probs_estimator = x/n
chi_square_test_statistic <- sum((x - n*h_0)^2/(n*h_0))
chi_square_maximum_likelihood_test_statistic <- sum((x - n*point_probs_estimator)^2/(n*point_probs_estimator))
k <-  length(x)
p_value_chi_sq <- 1-pchisq(chi_square_test_statistic, df = k-1)
p_value_chi_sq_max_likelihood <- 1-pchisq(chi_square_maximum_likelihood_test_statistic, df = k-6)
return(c("p_value of chi-square test" = p_value_chi_sq, "p_value of maximum-likelihood chi-square test" = p_value_chi_sq_max_likelihood ))
}
sample_multinom <-  rmultinom(1, 100, c(0.1, 0.2, 0.4, 0.2, 0.1))
get_p_value(x = sample_multinom, n = 100, h_0 = c(0.1, 0.2, 0.4, 0.2, 0.1))
get_p_value <-function(x,n,h_0){
#' Calculates p_values of user's choice test: either chi-square or maximum-likelihood chi-square
point_probs_estimator = x/n
chi_square_test_statistic <- sum((x - n*h_0)^2/(n*h_0))
chi_square_maximum_likelihood_test_statistic <- sum((x - n*point_probs_estimator)^2/(n*point_probs_estimator))
k <-  length(x)
p_value_chi_sq <- 1-pchisq(chi_square_test_statistic, df = k-1)
p_value_chi_sq_max_likelihood <- 1-pchisq(chi_square_maximum_likelihood_test_statistic, df = k-5)
return(c("p_value of chi-square test" = p_value_chi_sq, "p_value of maximum-likelihood chi-square test" = p_value_chi_sq_max_likelihood ))
}
sample_multinom <-  rmultinom(1, 100, c(0.1, 0.2, 0.4, 0.2, 0.1))
get_p_value(x = sample_multinom, n = 100, h_0 = c(0.1, 0.2, 0.4, 0.2, 0.1))
sample_multinom <-  rmultinom(1, 100, c(0.1, 0.2, 0.4, 0.2, 0.1))
get_p_value(x = sample_multinom, n = 100, h_0 = c(0.1, 0.2, 0.4, 0.1, 0.2)
get_p_value(x = sample_multinom, n = 100, h_0 = c(0.1, 0.2, 0.4, 0.1, 0.2))
get_p_value <-function(x,n,h_0){
#' Calculates p_values of user's choice test: either chi-square or maximum-likelihood chi-square
sample <-  rmultinom(1, sum(x), x/n)
point_probs_estimator = sample/n
chi_square_test_statistic <- sum((x - n*h_0)^2/(n*h_0))
chi_square_maximum_likelihood_test_statistic <- sum((x - n*point_probs_estimator)^2/(n*point_probs_estimator))
k <-  length(x)
p_value_chi_sq <- 1-pchisq(chi_square_test_statistic, df = k-1)
p_value_chi_sq_max_likelihood <- 1-pchisq(chi_square_maximum_likelihood_test_statistic, df = k-5)
return(c("p_value of chi-square test" = p_value_chi_sq, "p_value of maximum-likelihood chi-square test" = p_value_chi_sq_max_likelihood ))
}
sample_multinom <-  rmultinom(1, 100, c(0.1, 0.2, 0.4, 0.2, 0.1))
get_p_value(x = sample_multinom, n = 100, h_0 = c(0.1, 0.2, 0.4, 0.1, 0.2))
get_p_value <-function(x,n,h_0){
#' Calculates p_values of user's choice test: either chi-square or maximum-likelihood chi-square
sample <-  rmultinom(1, sum(x), x/n)
point_probs_estimator = sample/n
chi_square_test_statistic <- sum((x - n*h_0)^2/(n*h_0))
chi_square_maximum_likelihood_test_statistic <- sum((x - n*point_probs_estimator)^2/(n*point_probs_estimator))
k <-  length(x)
p_value_chi_sq <- 1-pchisq(chi_square_test_statistic, df = k-1)
p_value_chi_sq_max_likelihood <- 1-pchisq(chi_square_maximum_likelihood_test_statistic, df = k-1)
return(c("p_value of chi-square test" = p_value_chi_sq, "p_value of maximum-likelihood chi-square test" = p_value_chi_sq_max_likelihood ))
}
sample_multinom <-  rmultinom(1, 100, c(0.1, 0.2, 0.4, 0.2, 0.1))
get_p_value(x = sample_multinom, n = 100, h_0 = c(0.1, 0.2, 0.4, 0.1, 0.2))
get_p_value <-function(x,n,h_0){
#' Calculates p_values of user's choice test: either chi-square or maximum-likelihood chi-square
sample <-  rmultinom(1, sum(x), x/n)
point_probs_estimator = sample/n
chi_square_test_statistic <- sum((x - n*h_0)^2/(n*h_0))
chi_square_maximum_likelihood_test_statistic <- sum((x - n*point_probs_estimator)^2/(n*point_probs_estimator))
k <-  length(x)
p_value_chi_sq <- 1-pchisq(chi_square_test_statistic, df = k-1)
p_value_chi_sq_max_likelihood <- 1-pchisq(chi_square_maximum_likelihood_test_statistic, df = k-1)
return(c("p_value of chi-square test" = p_value_chi_sq, "p_value of maximum-likelihood chi-square test" = p_value_chi_sq_max_likelihood ))
}
sample_multinom <-  rmultinom(1, 100, c(0.1, 0.2, 0.4, 0.2, 0.1))
get_p_value(x = sample_multinom, n = 100, h_0 = c(0.1, 0.2, 0.4, 0.2, 0.1))
get_p_value <-function(x,n,h_0){
#' Calculates p_values of user's choice test: either chi-square or maximum-likelihood chi-square
sample <-  rmultinom(1, sum(x), x/n)
point_probs_estimator = sample/n
chi_square_test_statistic <- sum((x - n*h_0)^2/(n*h_0))
chi_square_maximum_likelihood_test_statistic <- sum((x - n*point_probs_estimator)^2/(n*point_probs_estimator))
k <-  length(x)
p_value_chi_sq <- 1-pchisq(chi_square_test_statistic, df = k-1)
p_value_chi_sq_max_likelihood <- 1-pchisq(chi_square_maximum_likelihood_test_statistic, df = k-1)
return(c("p_value of chi-square test" = p_value_chi_sq, "p_value of maximum-likelihood chi-square test" = p_value_chi_sq_max_likelihood ))
}
sample_multinom <-  rmultinom(1, 100, c(0.1, 0.2, 0.4, 0.2, 0.1))
get_p_value(x = sample_multinom, n = 100, h_0 = c(0.1, 0.2, 0.4, 0.2, 0.1))
get_p_value <-function(x,n,h_0){
#' Calculates p_values of user's choice test: either chi-square or maximum-likelihood chi-square
sample <-  rmultinom(1, sum(x), x/n)
point_probs_estimator = sample/n
chi_square_test_statistic <- sum((x - n*h_0)^2/(n*h_0))
chi_square_maximum_likelihood_test_statistic <- sum((x - n*point_probs_estimator)^2/(n*point_probs_estimator))
k <-  length(x)
p_value_chi_sq <- 1-pchisq(chi_square_test_statistic, df = k-1)
p_value_chi_sq_max_likelihood <- 1-pchisq(chi_square_maximum_likelihood_test_statistic, df = k-1)
return(c("p_value of chi-square test" = p_value_chi_sq, "p_value of maximum-likelihood chi-square test" = p_value_chi_sq_max_likelihood ))
}
sample_multinom <-  rmultinom(1, 100, c(0.1, 0.2, 0.4, 0.2, 0.1))
get_p_value(x = sample_multinom, n = 100, h_0 = c(0.1, 0.2, 0.4, 0.2, 0.1))
get_p_value <-function(x,n,h_0){
#' Calculates p_values of user's choice test: either chi-square or maximum-likelihood chi-square
sample <-  rmultinom(1, sum(x), x/n)
point_probs_estimator = sample/n
chi_square_test_statistic <- sum((x - n*h_0)^2/(n*h_0))
chi_square_maximum_likelihood_test_statistic <- sum((x - n*point_probs_estimator)^2/(n*point_probs_estimator))
k <-  length(x)
p_value_chi_sq <- 1-pchisq(chi_square_test_statistic, df = k-1)
p_value_chi_sq_max_likelihood <- 1-pchisq(chi_square_maximum_likelihood_test_statistic, df = k-1)
return(c("p_value of chi-square test" = p_value_chi_sq, "p_value of maximum-likelihood chi-square test" = p_value_chi_sq_max_likelihood ))
}
sample_multinom <-  rmultinom(1, 100, c(0.1, 0.2, 0.4, 0.2, 0.1))
get_p_value(x = sample_multinom, n = 100, h_0 = c(0.1, 0.2, 0.4, 0.2, 0.1))
get_p_value <-function(x,n,h_0){
#' Calculates p_values of user's choice test: either chi-square or maximum-likelihood chi-square
sample <-  rmultinom(1, sum(x), x/n)
point_probs_estimator = sample/n
chi_square_test_statistic <- sum((x - n*h_0)^2/(n*h_0))
chi_square_maximum_likelihood_test_statistic <- sum((x - n*point_probs_estimator)^2/(n*point_probs_estimator))
k <-  length(x)
p_value_chi_sq <- 1-pchisq(chi_square_test_statistic, df = k-1)
p_value_chi_sq_max_likelihood <- 1-pchisq(chi_square_maximum_likelihood_test_statistic, df = k-1)
return(c("p_value of chi-square test" = p_value_chi_sq, "p_value of maximum-likelihood chi-square test" = p_value_chi_sq_max_likelihood ))
}
sample_multinom <-  rmultinom(1, 100, c(0.1, 0.2, 0.4, 0.2, 0.1))
get_p_value(x = sample_multinom, n = 100, h_0 = c(0.1, 0.2, 0.4, 0.2, 0.1))
get_p_value <-function(x,n,h_0){
#' Calculates p_values of user's choice test: either chi-square or maximum-likelihood chi-square
sample <-  rmultinom(1, sum(x), x/n)
point_probs_estimator = sample/n
chi_square_test_statistic <- sum((x - n*h_0)^2/(n*h_0))
chi_square_maximum_likelihood_test_statistic <- sum((x - n*point_probs_estimator)^2/(n*point_probs_estimator))
k <-  length(x)
p_value_chi_sq <- 1-pchisq(chi_square_test_statistic, df = k-1)
p_value_chi_sq_max_likelihood <- 1-pchisq(chi_square_maximum_likelihood_test_statistic, df = k-1)
return(c("p_value of chi-square test" = p_value_chi_sq, "p_value of maximum-likelihood chi-square test" = p_value_chi_sq_max_likelihood ))
}
sample_multinom <-  rmultinom(1, 100, c(0.1, 0.2, 0.4, 0.2, 0.1))
get_p_value(x = sample_multinom, n = 100, h_0 = c(0.1, 0.2, 0.4, 0.2, 0.1))
get_p_value <-function(x,n,h_0){
#' Calculates p_values of user's choice test: either chi-square or maximum-likelihood chi-square
sample <-  rmultinom(1, sum(x), x/n)
point_probs_estimator = sample/n
chi_square_test_statistic <- sum((x - n*h_0)^2/(n*h_0))
chi_square_maximum_likelihood_test_statistic <- sum((x - n*point_probs_estimator)^2/(n*point_probs_estimator))
k <-  length(x)
p_value_chi_sq <- 1-pchisq(chi_square_test_statistic, df = k-1)
p_value_chi_sq_max_likelihood <- 1-pchisq(chi_square_maximum_likelihood_test_statistic, df = k-1)
return(c("p_value of chi-square test" = p_value_chi_sq, "p_value of maximum-likelihood chi-square test" = p_value_chi_sq_max_likelihood ))
}
sample_multinom <-  rmultinom(1, 100, c(0.1, 0.2, 0.4, 0.2, 0.1))
null_hypothesis_get_p_value(x = sample_multinom, n = 100, h_0 = c(0.1, 0.2, 0.4, 0.2, 0.1))
get_p_value <-function(x,n,h_0){
#' Calculates p_values of user's choice test: either chi-square or maximum-likelihood chi-square
sample <-  rmultinom(1, sum(x), x/n)
point_probs_estimator = sample/n
chi_square_test_statistic <- sum((x - n*h_0)^2/(n*h_0))
chi_square_maximum_likelihood_test_statistic <- sum((x - n*point_probs_estimator)^2/(n*point_probs_estimator))
k <-  length(x)
p_value_chi_sq <- 1-pchisq(chi_square_test_statistic, df = k-1)
p_value_chi_sq_max_likelihood <- 1-pchisq(chi_square_maximum_likelihood_test_statistic, df = k-1)
return(c("p_value of chi-square test" = p_value_chi_sq, "p_value of maximum-likelihood chi-square test" = p_value_chi_sq_max_likelihood ))
}
sample_multinom <-  rmultinom(1, 100, c(0.1, 0.2, 0.4, 0.2, 0.1))
null_hypothesis <-get_p_value(x = sample_multinom, n = 100, h_0 = c(0.1, 0.2, 0.4, 0.2, 0.1))
alternative_hypothesis <-  get_p_value(x = sample_multinom, n = 100, h_0 = c(0.1, 0.2, 0.2, 0., 0.1))
null_hypothesis
get_p_value <-function(x,n,h_0){
#' Calculates p_values of user's choice test: either chi-square or maximum-likelihood chi-square
sample <-  rmultinom(1, sum(x), x/n)
point_probs_estimator = sample/n
chi_square_test_statistic <- sum((x - n*h_0)^2/(n*h_0))
chi_square_maximum_likelihood_test_statistic <- sum((x - n*point_probs_estimator)^2/(n*point_probs_estimator))
k <-  length(x)
p_value_chi_sq <- 1-pchisq(chi_square_test_statistic, df = k-1)
p_value_chi_sq_max_likelihood <- 1-pchisq(chi_square_maximum_likelihood_test_statistic, df = k-1)
return(c("p_value of chi-square test" = p_value_chi_sq, "p_value of maximum-likelihood chi-square test" = p_value_chi_sq_max_likelihood ))
}
sample_multinom <-  rmultinom(1, 100, c(0.1, 0.2, 0.4, 0.2, 0.1))
null_hypothesis <-get_p_value(x = sample_multinom, n = 100, h_0 = c(0.1, 0.2, 0.4, 0.2, 0.1))
alternative_hypothesis <-  get_p_value(x = sample_multinom, n = 100, h_0 = c(0.1, 0.2, 0.2, 0., 0.1))
null_hypothesis
alternative_hypothesis
get_p_value <-function(x,n,h_0){
#' Calculates p_values of user's choice test: either chi-square or maximum-likelihood chi-square
sample <-  rmultinom(1, sum(x), h_0)
point_probs_estimator = sample/n
chi_square_test_statistic <- sum((x - n*h_0)^2/(n*h_0))
chi_square_maximum_likelihood_test_statistic <- sum((x - n*point_probs_estimator)^2/(n*point_probs_estimator))
k <-  length(x)
p_value_chi_sq <- 1-pchisq(chi_square_test_statistic, df = k-1)
p_value_chi_sq_max_likelihood <- 1-pchisq(chi_square_maximum_likelihood_test_statistic, df = k-1)
return(c("p_value of chi-square test" = p_value_chi_sq, "p_value of maximum-likelihood chi-square test" = p_value_chi_sq_max_likelihood ))
}
sample_multinom <-  rmultinom(1, 100, c(0.1, 0.2, 0.4, 0.2, 0.1))
null_hypothesis <-get_p_value(x = sample_multinom, n = 100, h_0 = c(0.1, 0.2, 0.4, 0.2, 0.1))
alternative_hypothesis <-  get_p_value(x = sample_multinom, n = 100, h_0 = c(0.1, 0.2, 0.2, 0.4, 0.1))
null_hypothesis
alternative_hypothesis
View(data)
View(data)
communications_employees <- data %>% filter(`DZIAL` = "DK")
communications_employees <- data %>% filter(`DZIAL` == "DK")
View(communications_employees)
get_p_value(communications_employees_responses, 98, (0.2, 0.2, 0.2, 0.2, 0.2))
get_p_value(communications_employees_responses, 98, c(0.2, 0.2, 0.2, 0.2, 0.2))
communications_employees <- data %>% filter(`DZIAL` == "DK")
communications_employees_responses <-  communications_employees$PYT_1
get_p_value(communications_employees_responses, 98, c(0.2, 0.2, 0.2, 0.2, 0.2))
View(communications_employees)
communications_employees_responses
communications_employees_responses <-  communications_employees$PYT_1 %>% summarise()
results_comms_emps <- communications_employees %>% group_by(PYT_1) %>%
summarise(response=sum(PYT_1),.groups = 'drop') %>%
as.data.frame()
results_comms_emps <- communications_employees %>% group_by(PYT_1) %>%
summarise(response=count(PYT_1),.groups = 'drop') %>%
as.data.frame()
communications_employees <- data[`DZIAL` == "DK"]
View(data)
communications_employees <- data(`DZIAL` == "DK")
communications_employees <- data.filter(`DZIAL` == "DK")
communications_employees <- data %>% filter(`DZIAL` == "DK")
communications_employees <- data %>% filter(`DZIAL` == "DK")
communications_employees <- data %>% filter(`DZIAL` == "DK")
results_comms_emps <- data %>% group_by(PYT_1) %>%
summarise_if(is.numeric, count, na.rm = TRUE) %>%
as.data.frame()
summary <- data %>%
filter(DZIAL == "DK") %>%
group_by(PYT_1) %>%
summarise_if(is.numeric, count, na.rm = TRUE)
summary <- data %>%
filter(DZIAL == "DK") %>%
group_by(PYT_1) %>%
summarise_if(is.integer(), count, na.rm = TRUE)
summary <- data %>%
filter(DZIAL == "DK") %>%
group_by(PYT_1) %>%
summarise_if(is.integer, count, na.rm = TRUE)
summary <- data %>%
filter(DZIAL == "DK") %>%
group_by(PYT_1) %>%
summarise(count = n())
print(summary)
communications_emps_responses <- data %>%
filter(DZIAL == "DK") %>%
group_by(PYT_1) %>%
summarise(count = n())$count
counts <- data %>%
filter(DZIAL == "DK") %>%
group_by(PYT_1) %>%
summarise(count = n())
communications_emps_responses <-  counts$count
print(communications_emps_responses)
get_p_value(communications_emps_responses, 98, c(0.2, 0.2, 0.2, 0.2, 0.2))
task_11_tab <-  table(c(0.00140, 0.00010), c(0.00669, 0.00413))
task_11_tab
smokers_tab <- matrix(c(0.00669, 0.00413,0.00140, 0.00010), nrow = 2, ncol = 2)
View(smokers_tab)
smokers_tab <- matrix(c(0.00669,0.00140, 0.00413, 0.00010), nrow = 2, ncol = 2)
View(smokers_tab)
smokers_tab <- matrix(c(0.00669,0.00140, 0.00413, 0.00010), nrow = 2, ncol = 2)
View(smokers_tab)
smokers_tab[2,1]
proportion_differences_disease_smoking = smokers_tab[1,1] - smokers[1,2]
proportion_differences_disease_smoking = smokers_tab[1,1] - smokers_tab[1,2]
## ischemic heart disease and smoking
proportion_differences_disease_smoking = smokers_tab[1,1] - smokers_tab[1,2]
RR_disease_smoking = smokers_tab[1,2]/smokers_tab[1,1]
## lung cancer and smoking
proportion_differences_disease_smoking<- smokers_tab[2,1] - smokers_tab[2,2]
RR_disease_smoking<- smokers_tab[2,2]/smokers_tab[2,1]
OR <- (smokers_tab[1,1]*smokers_tab[1,1])/(smokers_tab[1,2]*smokers_tab[2,1])
##  zadanie 11. Przeprowadzone wsród brytyjskich m˛e˙zczyzn badanie trwaj ˛ace 20 lat wykazało, ˙ze
##  odsetek zmarłych (na rok) z powodu raka płuc wynosił 0, 00140 wsród osób pal ˛acych papierosy
##  i 0,00010 wsród osób niepal ˛acych. Odsetek zmarłych z powodu choroby niedokrwiennej
##  serca wynosił 0, 00669 dla palaczy i 0, 00413 dla osób niepal ˛acych. Opisz zwi ˛azek pomi˛edzy
##  paleniem papierosów a ´smierci ˛a z powodu raka płuc oraz zwi ˛azek pomi˛edzy paleniem
##  papierosów a ´smierci ˛a z powodu choroby serca. Skorzystaj z ró˙znicy proporcji, ryzyka
##  wzgl˛ednego i ilorazu szans. Zinterpretuj warto´sci. Zwi ˛azek której pary zmiennych jest
##  silniejszy?
smokers_tab <- matrix(c(0.00669,0.00140, 0.00413, 0.00010), nrow = 2, ncol = 2)
## ischemic heart disease and smoking
proportion_differences_disease_smoking = smokers_tab[1,1] - smokers_tab[1,2]
RR_disease_smoking = smokers_tab[1,2]/smokers_tab[1,1]
## lung cancer and smoking
proportion_differences_cancer_smoking<- smokers_tab[2,1] - smokers_tab[2,2]
RR_cancer_smoking<- smokers_tab[2,2]/smokers_tab[2,1]
OR <- (smokers_tab[1,1]*smokers_tab[1,1])/(smokers_tab[1,2]*smokers_tab[2,1])
accidents <- matrix(c(1085, 703, 55623, 441239), nrow = 2, ncol = 2)
View(accidents)
accidents <- matrix(c(1085, 703, 55623, 441239), nrow = 2, ncol = 2)
sum_without_seatbelts <- 1085 + 55623
sum_seatbelts <- 703 + 441239
sum_mortal <-  085 + 703
sum_immortal <- 55623 + 441239
prob_death_seatbelts = sum_seatbelts/sum_without_seatbelts *  703/sum_mortal
prob_death_seatbelts = sum_seatbelts/sum(accidents) *  703/sum_mortal
prob_death_seatbelts = sum_seatbelts/sum(accidents) *  703/sum_mortal
prob_death_seatbelts = sum_seatbelts/sum(accidents) *  703/sum_seatbelts
prob_death_seatbelts = sum_without_seatbelts/sum(accidents) *  1085/sum_without_seatbelts
prob_death_seatbelts = sum_seatbelts/sum(accidents) *  703/sum_seatbelts
prob_death_without_seatbelts = sum_without_seatbelts/sum(accidents) *  1085/sum_without_seatbelts
accidents_probs <-  accidents_probs/sum(accidents)
accidents_probs <-  accidents/sum(accidents)
View(accidents_probs)
prob_seatbelts_death <-  sum_seatbelts/sum(accidents) *accidents_probs[2,1] / (sum_seatbelts/sum(accidents) *accidents_probs[2,1] +sum_without_seatbelts/sum(accidents) *accidents_probs[1,1])
prob_seatbelts_death <-  (accidents_probs[2,1] + accidents_probs[2,2]) *accidents_probs[2,1] / ((accidents_probs[2,1] + accidents_probs[2,2]) *accidents_probs[2,1] +(accidents_probs[1,1] + accidents_probs[1,2]) *accidents_probs[1,1])
prob_seatbelts_death <-  (accidents_probs[2,1] + accidents_probs[2,2]) *accidents_probs[2,1] / ((accidents_probs[2,1] + accidents_probs[2,2]) *accidents_probs[2,1] +(accidents_probs[1,1] + accidents_probs[1,2]) *accidents_probs[1,1])
prob_seatbelts_death <-  (accidents_probs[2,1] + accidents_probs[2,2]) *accidents_probs[2,1] / ((accidents_probs[2,1] + accidents_probs[2,2]) *accidents_probs[2,1] +(accidents_probs[1,1] + accidents_probs[1,2]) *accidents_probs[1,1])
prob_seatbelts_death <-  (accidents_probs[2,1] + accidents_probs[2,2]) *accidents_probs[2,1] / ((accidents_probs[2,1] + accidents_probs[2,2]) *accidents_probs[2,1] +(accidents_probs[1,1] + accidents_probs[1,2]) *accidents_probs[1,1])
sum_seatbelts / sum(accidents)
(sum_seatbelts*(703/sum_seatbelts)/sum(accidents))
(sum_seatbelts*(703/sum_seatbelts)/sum(accidents))/(sum_seatbelts*(703/sum_seatbelts)/sum(accidents) + sum_without_seatbelts*(1085/sum_without_seatbelts)/sum(accidents))
prob_withoutseatbelts_death <- (sum_without_seatbelts*(1085/sum_without_seatbelts)/sum(accidents))/(sum_seatbelts*(703/sum_seatbelts)/sum(accidents) + sum_without_seatbelts*(1085/sum_without_seatbelts)/sum(accidents))
(sum_without_seatbelts*(1085/sum_without_seatbelts)/sum(accidents))/(sum_seatbelts*(703/sum_seatbelts)/sum(accidents) + sum_without_seatbelts*(1085/sum_without_seatbelts)/sum(accidents))
proportion_differences_mortal<- smokers_tab[1,1] - smokers_tab[1,2]
proportion_differences_mortal<- accidents_probs[1,1] - accidents_probs[1,2]
proportion_differences_mortal<- accidents_probs[1,1] - accidents_probs[2,1]
RR_mortal <-  accidents_probs[2,1]/accidents_probs[1,1]
View(accidents_probs)
OR_mortal <-  accidents_probs[1,1]*accidents_probs[2,2]/(accidents_probs[1,2]*accidents_probs[2,1])
proportion_differences_mortal<- accidents_probs[1,2] - accidents_probs[1,1]
RR_mortal <-  accidents_probs[1,1]/accidents_probs[1,2]
proportion_differences_mortal<- accidents_probs[1,1] - accidents_probs[2,1]
RR_mortal <-  accidents_probs[2,1]/accidents_probs[1,1]
OR_mortal <-  accidents_probs[1,1]*accidents_probs[2,2]/(accidents_probs[1,2]*accidents_probs[2,2])
OR_mortal <-  accidents_probs[1,1]*accidents_probs[2,2]/(accidents_probs[1,2]*accidents_probs[2,1])
proportion_differences_mortal<- accidents_probs[1,1] - accidents_probs[2,1]
RR_mortal <-  accidents_probs[2,1]/accidents_probs[1,1]
OR_mortal <-  accidents_probs[2,1]*(1 - accidents_probs[2,1])/(accidents_probs[1,1]*(1 - accidents_probs[1,1]))
